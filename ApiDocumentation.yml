openapi: 3.0.1
info:
  title: Cookly
  description: This is specification of API for SE2 project. It helps to connect customer
    with the meal of their dreams
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.1.0
servers:
- url: /v2
tags:
- name: recipe
- name: ingredient
- name: user
- name: vendors
paths:
  /recipe:
    post:
      tags:
      - recipe
      summary: Add a new recipe to the store
      operationId: addRecipe
      requestBody:
        description: Recipe object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/recipe'
        required: true
      responses:
        200:
          description: New recipe created
          content: {}
        401:
          description: User is not authorized 
          content: {}
        403:
          description: Invalid recipe posted
          content: {}

    get:
      tags:
      - recipe
      summary: returns recipes available from selected ingredients
      parameters:
        - name: page
          in: query
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Ok
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/recipe' 
        404:
          description: Recipe not found
          content: {}
  /admin/recipe:
    get:
      tags:
      - recipe
      summary: returns all recipes to admin panel 
      parameters:
        - name: page
          in: query
          required: true
          schema:
            type: integer
        - name: limit
          in: query
          required: false
          schema:
            type: integer
      responses:
        200:
          description: Ok
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/recipe' 
        401:
          description: User not authorized
          content: {}
  /recipe/{id}:
    put:
      tags:
      - recipe
      summary: Update an existing recipe
      operationId: updateRecipe
      parameters:
        - in: "path"
          name: "id"
          description: "ID recipe to update"
          required: true
          schema:
            type: "integer"
      requestBody:
        description: Recipe object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/recipe'
        required: true
      responses:
        200:
          description: OK
          content: {}
        401:
          description: User is not nauthorized
          content: {}
        403:
          description: Validation exception
          content: {}
        404:
          description: Recipe not found
          content: {}

      
    delete:
      tags:
      - recipe
      summary: delete existing recipe
      parameters:
        - in: "path"
          name: "id"
          description: "ID recipe to delete"
          required: true
          schema:
            type: "integer"
      responses:
        200:
          description: OK
        401:
          description: User is not nauthorized
          content: {}
        403:
          description: Validation exception
          content: {}
        404:
          description: Recipe not found
          content: {}
  /ingredients:
    post:
      tags:
      - ingredient
      summary: Add a new ingredient to the store
      requestBody:
        description: ingredient object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ingredient'
        required: true
      responses:
        200:
          description: OK
          content: {}
        401:
          description: User is not authorized
          content: {}
        403:
          description: Validation exception
          content: {}
        404:
          description: Ingredient not found
          content: {}

    get:
      tags:
      - ingredient
      summary: returns list of next possible ingredients
      responses:
        200:
          description: Ok
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ingredient' 
        404:
          description: Ingredients not found
          content: {}
  /admin/ingredient:
    get:
      tags:
      - ingredient
      summary: returns all ingredients to admin panel 
      parameters:
        - name: page
          in: query
          required: true
          schema:
            type: integer
        - name: limit
          in: query
          required: false
          schema:
            type: integer
      responses:
        200:
          description: Ok
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ingredient' 
        401:
          description: User not authorized
          content: {}
  
  /ingredients/{id}:
    put:
      tags:
      - ingredient
      summary: Update an existing ingredient
      operationId: updateingredient
      parameters:
        - name: page
          in: query
          required: true
          schema:
            type: integer
        - name: limit
          in: query
          description: Amount of results per page
          schema:
            type: integer
            default: 10
        - in: path
          name: id
          description: "ID ingredient to edit"
          required: true
          schema:
            type: "integer"
      requestBody:
        description: ingredient object that needs to replace previous one
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ingredient'
        required: true
      responses:
        200:
          description: OK
          content: {}
        401:
          description: User is not authorized
          content: {}
        403:
          description: Validation exception
          content: {}
        404:
          description: Ingredient not found
          content: {}
    delete:
      tags:
      - ingredient
      summary: delete existing ingredient
      parameters:
        - in: "path"
          name: "id"
          description: "ID ingredient to delete"
          required: true
          schema:
            type: "integer"
      responses:
        200:
          description: OK
          content: {}
        401:
          description: User is not authorized
          content: {}
        404:
          description: Ingredient not found
          content: {}

                  
  /vendors/recipes:
    get:
      tags:
      - vendors
      summary: Get list of vendors that can deliver selected dish
      parameters:
      - name: page
        in: query
        required: true
        schema:
          type: integer
      - name: limit
        in: query
        description: Amount of results per page
        schema:
          type: integer
          default: 10
      - in: query
        name: name
        required: true
        description: name of searched recipe
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/restaurant'
        404:
          description: No vendors found
          content: {}
          
  /vendors/ingretients:
    get:
      tags:
      - vendors
      summary: Get list of ingretients available in delivery
      parameters:
      - name: page
        in: query
        required: true
        schema:
          type: integer
      - name: limit
        in: query
        description: Amount of results per page
        schema:
          type: integer
          default: 10
      - in: query
        name: name
        required: true
        description: name of searched ingredient
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/shop'
        404:
          description: Invalid ID 
          content: {}
  /vendors:
    post:
      tags:
      - vendors
      summary: send customer delivery data
      requestBody:
        description: customer data
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                surname:
                  type: string
                address:
                  type: string
        required: true
      responses:
        200:
          description: OK
        403:
          description: Validation exception
          content: {}

  /registration:
    post:
      tags:
        - user
      summary: register new user
      requestBody:
        description: customer data needed to create profile. Passwo
        content:
          application/json:
            schema:
              type: "object"
              properties:
                username:
                  type: "string"
                emal:
                  type: "string"
                password:
                  type: "string"
                repPassword:
                  type: "string"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  id:
                    type: integer
                  username:
                    type: string
                  password:
                    type: string
                  isAdmin:
                    type: boolean
                  profilePhoto:
                    type: string
        403:
          description: Validation exception
          content: {}

  /loggin:
    post:
      tags:
        - user
      summary: logging in
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  token:
                    type: "string"
        403:
          description: Validation exception
          content: {}

  /user/{id}:
    delete:
      tags:
      - user
      summary: delete existing user
      parameters:
        - in: "path"
          name: "id"
          description: "ID of user to delete"
          required: true
          schema:
            type: "integer"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        404:
          description: user not found
    put:
      tags:
      - user
      summary: edit existing user
      parameters:
        - in: "path"
          name: "id"
          description: "ID of user to edit"
          required: true
          schema:
            type: "integer"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        404:
          description: user not found

components:
  schemas:
    ingredient:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        photo:
          type: string
    recipe:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        instructions:
          type: string
        ingredients:
          type: array
          items:
            type: object
            properties:
              ingredient:
                $ref: '#/components/schemas/ingredient'
              quantity:
                type: string
        tags:
          type: array
          items:
            type: string
            enum:
            - vegetarian
            - gluten free
            - low calorie
            - no lactose
    user:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        password:
          type: string
        isAdmin:
          type: boolean
        profilePhoto:
          type: string
        savedRecipes:
          type: array
          items:
            $ref: '#/components/schemas/recipe'
    restaurant:
      type: object
      properties:
        productName:
          type: string
        vendorName:
          type: string
        price:
          type: integer
          
    shop:
      type: object
      properties:
        vendorName:
          type: string
        products:
          type: array
          items:
            type: object
            properties:
              productName:
                type: string
              price:
                type: integer
        
