openapi: 3.0.1
info:
  title: Cookly
  description: This is specification of API for SE2 project. It helps to connect customer
    with the meal of their dreams
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.2.1
servers:
- url: /v2
tags:
- name: recipe
- name: ingredient
- name: user
- name: vendors
paths:
  /recipes:
    post:
      tags:
      - recipe
      summary: Add a new recipe to the store
      operationId: addRecipe
      requestBody:
        description: Recipe object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/recipePOST'
        required: true
      responses:
        200:
          description: New recipe created
          content: {}
        400:
          description: Bad request body 
          content: {}
        401:
          description: User is not authorized 
          content: {}
        403:
          description: Invalid/duplicated recipe posted
          content: {}
        500:
          description: Internal server error
          content: {}
  

    put:
      tags:
      - recipe
      summary: Update an existing recipe
      operationId: updateRecipe
      requestBody:
        description: Recipe object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/recipe'
        required: true
      responses:
        200:
          description: OK
          content: {}
        400:
          description: Bad request - Incorrect body
          content: {}
        401:
          description: User is not nauthorized
          content: {}
        404:
          description: Recipe not found
          content: {}
        500:
          description: Internal server error
          content: {}
  /recipes/all:        
    post:
      tags:
      - recipe
      summary: returns all recipes to admin panel 
      parameters:
        - name: page
          in: query
          required: true
          schema:
            type: integer
        - name: limit
          in: query
          required: false
          schema:
            type: integer
      requestBody:
        description: Selected filters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/recipeFilter'
      responses:
        200:
          description: Ok
          content:
            '*/*':
              schema:
                type: object
                properties:
                  total_recipes:
                    type: number
                  recipes:
                    type: array
                    items:
                      $ref: '#/components/schemas/recipe' 
        400:
          description: Bad request - Incorrect params
          content: {}
        401:
          description: User not authorized
          content: {}
        500:
          description: Internal server error
          content: {}
    
  /recipes/{id}:
    delete:
      tags:
      - recipe
      summary: delete existing recipe
      parameters:
        - in: "path"
          name: "id"
          description: "ID recipe to delete"
          required: true
          schema:
            type: "integer"
      responses:
        200:
          description: OK
        401:
          description: User is not nauthorized
          content: {}
        404:
          description: Recipe not found
          content: {}
        500:
          description: Internal server error
          content: {}
          
  /recipes/user:
    post:
      tags:
      - recipe
      summary: returns recipes available from selected ingredients
      parameters:
        - name: page
          in: query
          required: true
          schema:
            type: integer
        - name: limit
          in: query
          required: true
          schema:
            type: integer
      requestBody:
        description: List of previously selected ingredients by the user
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ingredient'
      responses:
        200:
          description: Ok
          content:
            '*/*':
              schema:
                type: object
                properties:
                  total_recipes:
                    type: number
                  recipes:
                    type: array
                    items:
                      $ref: '#/components/schemas/recipe' 
        400:
          description: Bad request
          content: {}
        401:
          description: User not authorized
          content: {}
        404:
          description: No recipes match ingredient list
          content: {}
        500:
          description: Internal server error
          content: {}

          
  /ingredients:
    post:
      tags:
      - ingredient
      summary: Add a new ingredient to the store
      requestBody:
        description: ingredient object that needs to be added to the store
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
        required: true
      responses:
        200:
          description: OK
          content: {}
        400:
          description: Bad request - Invalid body
          content: {}
        401:
          description: User is not authorized
          content: {}
        403:
          description: Duplicated ingredient
          content: {}
        500:
          description: Internal server error
          content: {}
          
    put:
      tags:
      - ingredient
      summary: Update an existing ingredient
      operationId: updateingredient

      requestBody:
        description: ingredient object that needs to replace previous one
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ingredient'
        required: true
      responses:
        200:
          description: OK
          content: {}
        400:
          description: Bad request - Invalid Body
          content: {}
        401:
          description: User is not authorized
          content: {}
        404:
          description: Ingredient not found
          content: {}
        500:
          description: Internal server error
          content: {}
  /ingredients/all:
    post:
      tags:
      - ingredient
      summary: returns all ingredients to admin panel 
      parameters:
        - name: page
          in: query
          required: true
          schema:
            type: integer
        - name: limit
          in: query
          required: false
          schema:
            type: integer
      requestBody:
        description: selected filter
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
        required: false
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_ingredients:
                    type: integer
                  ingredients:
                    type: array
                    items:
                      $ref: '#/components/schemas/ingredient'
        401:
          description: User not authorized
          content: {}
        500:
          description: Internal server error
          content: {}
  /ingredients/{id}:

    delete:
      tags:
      - ingredient
      summary: delete existing ingredient
      parameters:
        - in: "path"
          name: "id"
          description: "ID ingredient to delete"
          required: true
          schema:
            type: "integer"
      responses:
        200:
          description: OK
          content: {}
        401:
          description: User is not authorized
          content: {}
        404:
          description: Ingredient not found
          content: {}
        500:
          description: Internal server error
          content: {}

  
  /ingredients/next:
    get:
      tags:
      - ingredient
      summary: returns all ingredients to user panel 
      parameters:
        - name: page
          in: query
          required: true
          schema:
            type: integer
        - name: limit
          in: query
          required: false
          schema:
            type: integer
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_ingredients:
                    type: integer
                  ingredients:
                    type: array
                    items:
                      $ref: '#/components/schemas/ingredient'
        401:
          description: User not authorized
          content: {}
        500:
          description: Internal server error
          content: {}



  /registration:
    post:
      tags:
        - user
      summary: register new user
      requestBody:
        description: customer data needed to create profile. Password is hashed (SHA256)
        content:
          application/json:
            schema:
              type: "object"
              properties:
                username:
                  type: "string"
                password:
                  type: "string"
      responses:
        200:
          description: OK
          content: {}
        403:
          description: Username already Exists
          content: {}
        500:
          description: Internal server error
          content: {}

  /login:
    post:
      tags:
        - user
      summary: logging in
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  token:
                    type: "string"
        403:
          description: Validation exception - Incorrect credentials
          content: {}
        500:
          description: Internal server error
          content: {}
  /user:
    put:
      tags:
      - user
      summary: edit existing user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/userEdit"
      responses:
        200:
          description: OK
          content: {}
        400:
          description: Bad request - Invalid body
        404:
          description: user not found
        500:
          description: Internal server error
          content: {}
          
  /user/{id}:
    delete:
      tags:
      - user
      summary: delete existing user
      parameters:
        - in: "path"
          name: "id"
          description: "ID of user to delete"
          required: true
          schema:
            type: "integer"
      responses:
        200:
          description: OK
          content: {}
        404:
          description: user not found
        500:
          description: Internal server error
          content: {}


                  
  /vendors/recipes:
    get:
      tags:
      - vendors
      summary: Get list of vendors that can deliver selected dish
      parameters:
      - name: page
        in: query
        required: true
        schema:
          type: integer
      - name: limit
        in: query
        description: Amount of results per page
        schema:
          type: integer
          default: 10
      - in: query
        name: name
        required: true
        description: name of searched recipe
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
                properties:
                  total_vendors:
                    type: number
                  vendors:
                    type: array
                    items:
                      $ref: '#/components/schemas/restaurant'
        400:
          description: Bad request - Invalid body
          content: {}
        401: 
          description: User not authorized
          content: {}
        404:
          description: No vendors found
          content: {}
        500:
          description: Internal server error
          content: {}
          
  /vendors/ingretients:
    post:
      tags:
      - vendors
      summary: Get list of ingretients available in delivery
      parameters:
      - name: page
        in: query
        required: true
        schema:
          type: integer
      - name: limit
        in: query
        description: Amount of results per page
        schema:
          type: integer
          default: 10
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ingredient:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string

      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: object
                properties:

                  total_vendors:
                    type: number
                  vendors:
                    type: array
                    items:
                      $ref: '#/components/schemas/shop'
        400:
          description: Bad request - Invalid body
          content: {}
        401: 
          description: User not authorized
          content: {}
        404:
          description: No vendors found
          content: {}
        500:
          description: Internal server error
          content: {}
  /vendors:
    post:
      tags:
      - vendors
      summary: send customer delivery data

          
          
      requestBody:
        description: customer data
        content:
          application/json:
            schema:
              type: object
              properties:
                
                name:
                  type: string
                surname:
                  type: string
                address:
                  type: string
                price:
                  type: number
                vendor:
                  type: object
                  properties:
                    vendor_type:
                      type: number
                      enum:
                      - shop
                      - restaurant
                    vendor_id:
                      type: number
        required: true
      responses:
        200:
          description: OK
        400:
          description: Bad request - Invalid body
          content: {}
        500:
          description: Internal server error
          content: {}

components:
  schemas:
    ingredient:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
    recipeFilter:
      type: object
      properties:
        name:
          type: string
        tags:
          type: array
          items:
            type: string
            enum:
            - vegetarian
            - gluten free
            - low calorie
            - no lactose
    recipe:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        instructions:
          type: string
        ingredients:
          type: array
          items:
            type: object
            properties:
              ingredient:
                $ref: '#/components/schemas/ingredient'
              quantity:
                type: string
        tags:
          type: array
          items:
            type: string
            enum:
            - vegetarian
            - gluten free
            - low calorie
            - no lactose
    recipePOST:
      type: object
      properties:
        name:
          type: string
        instructions:
          type: string
        ingredients:
          type: array
          items:
            type: object
            properties:
              ingredient:
                $ref: '#/components/schemas/ingredient'
              quantity:
                type: string
        tags:
          type: array
          items:
            type: string
            enum:
            - vegetarian
            - gluten free
            - low calorie
            - no lactose
    user:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        password:
          type: string
        isAdmin:
          type: boolean
        savedRecipes:
          type: array
          items:
            $ref: '#/components/schemas/recipe'
            
    userEdit:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        password:
          type: string
        savedRecipes:
          type: array
          items:
            type: number
    
    restaurant:
      type: object
      properties:
        productName:
          type: string
        vendorName:
          type: string
        price:
          type: integer
          
    shop:
      type: object
      properties:
        vendorName:
          type: string
        products:
          type: array
          items:
            type: object
            properties:
              productName:
                type: string
              price:
                type: integer
        